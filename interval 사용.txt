var ojtD3 = angular.module('ojtD3', []);

ojtD3.controller("barCtrl", function($scope, $interval, $http) {
		
		// 날짜 형식
	 	var  time_format = d3.timeFormat("%H:%M:%S");
 		var dataset = [];
 		var interval;

 		var numDataPoints = 12; // 데이터 개수	
 		var minValue = 5; // 최소 값
 		var maxRange = 30; // 최대 값
 		var svgWidth = 700;
 		var svgHeight = 340;
 		var barPadding = 1;
 		var padding = 30;
 		
 		var limit = 60 * 1,
        duration = 750,
        now = new Date(Date.now() - duration)
 		
 		var x = d3.scaleTime()
			        .domain([now - (limit - 2), now - duration])
			        .range([0, svgWidth])

        var y = d3.scaleLinear()
			        .domain([0, 100])
			        .range([svgHeight, 0])

 		// 서버 데이터 요청
 		var getData = function() {
 		
 			var req = {
 				method : "GET",
 				url : ctx + "/interval",
 				headers : {
 					"Content-Type" : "application/json; charset=UTF-8"
 				},
 			};

 			$http(req) // 요청 파라미터
 			.then(function mySuccess(response) {
 				$scope.newData = response.data;
 			}, function myError(response) {
 				alert(response);
 			});
 		};
 		

 		$scope.makeDataset = function(dataset){
	        var now = new Date();
	         hours = now.getHours();
	         minutes = now.getMinutes();
	         seconds = now.getSeconds();
	  
//	         if (hours > 12){
//	             hours -= 12;
//	         ampm = "오후 ";
//	         }else{
//	             ampm = "오전 ";
//	         }
	         if (hours < 10){
	             hours = "0" + hours;
	         }
	         if (minutes < 10){
	             minutes = "0" + minutes;
	         }
	         if (seconds < 10){
	             seconds = "0" + seconds;
	         }
	
	    document.getElementById("dpTime").innerHTML = hours + ":" + minutes + ":" + seconds;
	    
	 
	 	var newNumber = Math.floor(Math.random() * 30)+10;
	 
		dataset.push({
			time : hours + ":" + minutes + ":" + seconds,
			value : newNumber
		});
	 	
	 };
	 											
	
		var svg2 = d3.select("body")
						.append("svg")
						.attr("width", svgWidth)
						.attr("height", svgHeight);


		var xScale = d3.scaleBand()
						.domain(d3.range(dataset.length)) // 정의역
						.rangeRound([ padding , svgWidth - padding * 2]) // 치역 padding 부터 
						.paddingInner(0.05);

		var yScale = d3.scaleLinear()
						.domain([ 0, d3.max(dataset, function(d) {
							return d.value;
						})])
						.range([ svgHeight - padding, padding]);
		
		//.range([h - padding, padding]);
		var x_domain = d3.extent(dataset, function(d) { 
							return new Date(d.time); 
						});
	
		var axisXScale = d3.scaleTime()
							.domain([now - (limit - 2), now - duration])
							.rangeRound([padding, svgWidth - padding * 2]);
		
		var barYScale = d3.scaleLinear()
							.domain([ 0, d3.max(dataset, function(d) {
								return d.value;
							})])
							.range([ 0, svgHeight - padding]);
		
		
		// x축 생성하는 축 함수 정의
		// 축은 어떤 척도를 다뤄야 하는지 반드리 알려줘야 함
		// 축을 나타내는 선을 기준으로 라벨의 위치 지정. 기본값은 bottom, 라벨이 선 아래쪽에 표시 됨
		
		var xAxis = d3.axisBottom()
						.scale(axisXScale);
		// x축 생성
		svg2.append("g")
			.attr("class", "axis x")
			.attr("transform", "translate(0,"+(svgHeight - padding)+")")
			.call(xAxis);
		
		var yAxis = d3.axisLeft()
						.scale(yScale)
						.ticks(5);
		
		
		// y축 생성
		svg2.append("g")
			.attr("class", "axis y")
			.attr("transform", "translate("+ padding+",0)")
			.call(yAxis);

		var time = function(d) {
			return d.time;
		}

		svg2.selectAll("rect")
			.data(dataset, time)
			.enter()
			.append("rect")
			.attr("x", function(d, i) {
					return xScale(i);
				})
			.attr("y", function(d) {
					return svgHeight - padding - barYScale(d.value);
				})
			.attr("width", xScale.bandwidth())
			.attr("height", function(d) {
					return barYScale(d.value);
				})
			.attr("fill", function(d) {
					return "rgb(0, 0, " + (d.value * 10) + ")";
				})
			.on("mouseout",function(d) {
				d3.select(this)
					.transition()
					.duration(250)
					.attr("fill","rgb(0, 0, " + (d.value * 10) + ")");
				})
			.append("title")
			.text(function(d){
				return "This value is " + d.value;
			});

		svg2.selectAll("text").data(dataset, time).enter().append("text")
				.text(function(d) {
					return d.value;
				})
				.attr("x", function(d, i) {
					return xScale(i) + xScale.bandwidth() / 2;
				})
				.attr("y", function(d) {
					return svgHeight - barYScale(d.value);
				})
				.attr("font-family", "sans-serif").attr("font-size", "8px")
				.attr("fill", "white").attr("text-anchor", "middle");

		
	    function tick() {
	        now = new Date()


	            // Shift domain
	            x.domain([now - (limit - 2) * duration, now - duration])

	            // Slide x-axis left
	            axis.transition()
	                .duration(duration)
	                .ease('linear')
	                .call(x.axis)

	            // Slide paths left
	            paths.attr('transform', null)
	                .transition()
	                .duration(duration)
	                .ease('linear')
	                .attr('transform', 'translate(' + x(now - (limit - 1) * duration) + ')')
	                .each('end', tick)

	            // Remove oldest data point from each group
	            for (var name in groups) {
	                var group = groups[name]
	                group.data.shift()
	            }
	        }

	        tick()
	        
	        
//		// 값 문서요소 추가하기
//		d3.selectAll("p")
//				.on("click", function() {
//
//							var paragraphID = d3.select(this).attr("id");
//
//							if (paragraphID == "add") {
//								// 신규 값 추가
//								var maxValue = 25;
//								var minValue = 2;
//
//								// 사용자 추가 데이터
//								//var newNumber = Math.floor(Math.random() * maxValue) + minValue;
//								//var lasttimeValue = dataset[dataset.length -1].time;
//
//								var newNumber = Number(document.getElementById("quantity").value);
//								var lasttimeValue = document.getElementById("time").value;
//
//								dataset.push({
//									// key: lasttimeValue + 1,
//									time : lasttimeValue,
//									value : newNumber
//								});
//							} else {
//								// dataset에서 값 하나 제거
//								dataset.shift();
//							}
//
//							// 추가되는 막대를 위한 공간 확보를 위해 x축의 척도 조절
//							xScale.domain(d3.range(dataset.length));
//							
//							yScale.domain([ 0, d3.max(dataset, function(d) {
//											return d.value;
//										})]);
//								
//							barYScale.domain([ 0, d3.max(dataset, function(d) {
//								return d.value;
//							}) ]);
//							
//								x_domain = d3.extent(dataset, function(d) {
//									return new Date(d.time); 
//								});
//								
//							
//								axisXScale.domain(x_domain)
//								
//								xAxis.scale(axisXScale);
//								yAxis.scale(yScale);
//								
//								
//							// 데이터가 갱신된 선택물 저장
//							var bars = svg2.selectAll("rect")
//											.data(dataset,time);
//							// 모자란 선택물 추출
//							bars.enter()
//								.append("rect")
//								.attr("x", svgWidth - padding * 2) // 새로운 rect의 가로위치를 svg 오른쪽 모서리를 바깥쪽 위치로 설정
//								.attr("y", function(d) {
//										return svgHeight - padding - barYScale(d.value);
//									})
//								.attr("width", xScale.bandwidth())
//								.attr("height",	function(d) {
//										return barYScale(d.value);
//								})
//								.attr("fill",function(d) {
//										return "rgb(0,0, " + Math.round(d.value * 10) + ")";
//								})
//								.merge(bars) // 막대 갱신
//								.transition()
//								.duration(500)
//								.attr("x",function(d, i) {
//											console.log("i", i)
//											console.log("bar xScale(i)",xScale(i));
//											return xScale(i);
//								})
//								.attr("y", function(d) {
//										return svgHeight - padding - barYScale(d.value);
//									})
//								.attr("width", xScale.bandwidth())
//								.attr("height", function(d) {
//										return barYScale(d.value);
//								});
//
//							bars.exit()
//								.transition()
//								.duration(500)
//								.attr("x",-xScale.bandwidth()) 
//							// 왼쪽으로 제거
//							// 이전 트랜지션이 완전히 끝나기를 기다렸다가 dom에서 문서요소 삭제
//							.remove();
//
//							// 라벨 선택
//							var labels = svg2.selectAll("text")
//											.data(dataset,time);
//
//							//라벨 갱신
//							labels.enter()
//								.append("text")
//								.text(function(d) {
//									return d.value;
//							})
//							.attr("x", svgWidth - padding * 2)
//							.attr("y", function(d) {
//								return svgHeight - barYScale(d.value);
//							})
//							.attr("font-family", "sans-serif")
//							.attr("font-size", "8px")
//							.attr("fill", "white")
//							.attr("text-anchor", "middle")
//							.merge(labels) //Update…
//							.transition()
//							.duration(500)
//							.attr("x", function(d, i) {
//										return xScale(i) + xScale.bandwidth() / 2;
//							});
//
//							labels.exit()
//									.transition()
//									.duration(500)
//									.attr("x",-xScale.bandwidth())
//									.remove();
//				
//			
//			
//			// x축 
//			svg2.selectAll("g.axis.x")
//				.call(xAxis);
//			
//			
//			// y축 생성
//			svg2.selectAll("g.axis.y")
//				.call(yAxis);
//				
//		});
		
		 interval = $interval(function(){
			 $scope.makeDataset(dataset);
		 }, 1000);
	});